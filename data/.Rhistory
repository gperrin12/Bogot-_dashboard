newline
results<-rbind(results, newline)
results<-data.frame(Facility="Facility", shape="Shape", scale="Scale")
View(results)
newline<-fw
results<-rbind(results, newline)
class(fw)
print(fw)
summary(fw)
results<-data.frame()
newline<-fw
results<-rbind(results, newline)
length(newline)
newline
length(results)
ppcomp(list(fw fln, fg), legendtext=plot.legend)
ppcomp(list(fw), legendtext=plot.legend)
denscomp(list(fw))
newdata
fw<-fitdist(newdata$Hours.to.receive, "weibull")
fg<-fitdist(newdata$Hours.to.receive, "gamma")
fln<-fitdist(newdata$Hours.to.receive, "lnorm")
denscomp(list(fw, fln, fg), legendtext=plot.legend)
plot.legend <- c("Weibull", "lognormal", "gamma")
denscomp(list(fw, fln, fg), legendtext=plot.legend)
i
weibull.column<-c(length(17))
weibull.column[i]<-fw
weibull.column<-fw
final.data<-data.frame(weibull.column)
coef(fw)
weibull.column<-coef(fw)
d
final.data<-data.frame(weibull.column)
final.data
weibull.column[i]<-coef(fw)
type(coef(fw))
class(coef(fw))
coef(fw)
coef(fw)[1]
i
newrow<-c(i, coef(fw))
newrow
results
results<-data.frame(Facility="Facility", shape.coef="shape.coef", scale.coef="scale.coef")
results
rbind(newrow,results)
results<-data.frame(Facility, shape.coef, scale.coef)
results<-data.frame(Facility="Facility", shape.coef=1, scale.coef=1)
results
newrow<-c(i,coef(fw))
rbind(newrow,results)
newrow
results
rbind(newrow, results)
rbind(results, newrow)
newrow
newrow[1]
newrow[2]
class(newrow[2])
tonumeric(newrow[2])
as.numeric(newrow[2])
newrow<-c(i,as.numeric(coef(fw)))
newrow
rbind(results, newrow)
newrow[1]
newrow
class(newrow[1])
class(newrow)
class(newrow[2])
class(as.mumeric(coef(fw)))
class(as.numeric(coef(fw)))
newrow[2]
newrow<-data.frame(i,as.numeric(coef(fw)))
newrow
newrow<-data.frame(col=(i,as.numeric(coef(fw)))
fw_coef<-as.numeric(coef(fw))
fw_coef
class(fw_coef)
fw_coef[1]
fw_coef[2]
newrow<-data.frame(i,fw_coef)
newrow
newrow<-data.frame(i,fw_coef[1],fw_coef[2])
newrow
rbind(results, newrow)
newrow<-data.frame(Facility,shape.coef,scale.coef)
Facility<-i
shape.coef<-fw_coef[1]
scale.coef<-fw_coef[2]
facility
Facility
shape.coef
scale.coef
newrow
newrow<-data.frame(Facility,shape.coef,scale.coef)
rbind(results, newrow)
results<-results[-1]
theData<-readWorksheet(loadWorkbook("/Users/geoffperrin/Desktop/xcode_files/R_folder/data_files/Historical Trailer Metric Data All CSCs FY2015 thru Q2.xlsx"), sheet = 1)
keeps<-c("Facility","Hours.to.receive")
theData<-theData[keeps]
facility_list<-c(unique(theData$Facility))
results<-data.frame(Facility="Facility", shape.coef=1, scale.coef=1)
results<-results[-1]
for(i in facility_list){
print(i)
newdata<-subset(theData, theData$Facility==i)
fw<-fitdist(newdata$Hours.to.receive, "weibull")
fg<-fitdist(newdata$Hours.to.receive, "gamma")
fln<-fitdist(newdata$Hours.to.receive, "lnorm")
print(summary(fw))
plot.legend <- c("Weibull", "lognormal", "gamma")
denscomp(list(fw, fln, fg), legendtext=plot.legend)
fw_coef<-as.numeric(coef(fw))
Facility<-i
shape.coef<-fw_coef[1]
scale.coef<-fw_coef[2]
newrow<-data.frame(Facility,shape.coef,scale.coef)
rbind(results, newrow)
}
results
results<-data.frame(Facility="Facility", shape.coef=1, scale.coef=1)
results
results<-results[-1]
results
theData<-readWorksheet(loadWorkbook("/Users/geoffperrin/Desktop/xcode_files/R_folder/data_files/Historical Trailer Metric Data All CSCs FY2015 thru Q2.xlsx"), sheet = 1)
keeps<-c("Facility","Hours.to.receive")
theData<-theData[keeps]
facility_list<-c(unique(theData$Facility))
results<-data.frame(Facility="Facility", shape.coef=1, scale.coef=1)
for(i in facility_list){
print(i)
newdata<-subset(theData, theData$Facility==i)
fw<-fitdist(newdata$Hours.to.receive, "weibull")
fg<-fitdist(newdata$Hours.to.receive, "gamma")
fln<-fitdist(newdata$Hours.to.receive, "lnorm")
print(summary(fw))
plot.legend <- c("Weibull", "lognormal", "gamma")
denscomp(list(fw, fln, fg), legendtext=plot.legend)
fw_coef<-as.numeric(coef(fw))
Facility<-i
shape.coef<-fw_coef[1]
scale.coef<-fw_coef[2]
newrow<-data.frame(Facility,shape.coef,scale.coef)
rbind(results, newrow)
}
results
facility_list
newrow
results
theData<-readWorksheet(loadWorkbook("/Users/geoffperrin/Desktop/xcode_files/R_folder/data_files/Historical Trailer Metric Data All CSCs FY2015 thru Q2.xlsx"), sheet = 1)
keeps<-c("Facility","Hours.to.receive")
theData<-theData[keeps]
facility_list<-c(unique(theData$Facility))
results<-data.frame(Facility="Facility", shape.coef=1, scale.coef=1)
for(i in facility_list){
print(i)
newdata<-subset(theData, theData$Facility==i)
fw<-fitdist(newdata$Hours.to.receive, "weibull")
fg<-fitdist(newdata$Hours.to.receive, "gamma")
fln<-fitdist(newdata$Hours.to.receive, "lnorm")
print(summary(fw))
plot.legend <- c("Weibull", "lognormal", "gamma")
denscomp(list(fw, fln, fg), legendtext=plot.legend)
fw_coef<-as.numeric(coef(fw))
Facility<-i
shape.coef<-fw_coef[1]
scale.coef<-fw_coef[2]
newrow<-data.frame(Facility,shape.coef,scale.coef)
results<-rbind(results, newrow)
}
results
results<-results[-1]
results
results<-results[-c(1)]
results
results<-results[-c(1),]
results
theData<-readWorksheet(loadWorkbook("/Users/geoffperrin/Desktop/xcode_files/R_folder/data_files/Historical Trailer Metric Data All CSCs FY2015 thru Q2.xlsx"), sheet = 1)
keeps<-c("Facility","Hours.to.receive")
theData<-theData[keeps]
facility_list<-c(unique(theData$Facility))
results<-data.frame(Facility="Facility", shape.coef=1, scale.coef=1)
for(i in facility_list){
print(i)
newdata<-subset(theData, theData$Facility==i)
fw<-fitdist(newdata$Hours.to.receive, "weibull")
fg<-fitdist(newdata$Hours.to.receive, "gamma")
fln<-fitdist(newdata$Hours.to.receive, "lnorm")
print(summary(fw))
plot.legend <- c("Weibull", "lognormal", "gamma")
denscomp(list(fw, fln, fg), legendtext=plot.legend)
fw_coef<-as.numeric(coef(fw))
Facility<-i
shape.coef<-fw_coef[1]
scale.coef<-fw_coef[2]
newrow<-data.frame(Facility,shape.coef,scale.coef)
results<-rbind(results, newrow)
}
results
results[-c(1),]
print("hello world")
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
myVector<-makeVector(1:10)
myVector$get()
myVector$getmean()
cachemean(myVector)
myVector$getmean()
myVector$getmean()
cachemean$getmean()
cachemean$getmean(myVector)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(myVector)
cachemean(myVector)
crazy <- function() {
x <<- 3.14}
crazy
crazy()
print(x)
clear()
print(y)
print(x)
crazy <- function() {
x <<- 3.14
y <- 6}
crazy()
print(x)
print(y)
crazy()
print(x)
crazy <- function() {
x <<- 4.14
y <<- 6}
print(x)
crazy()
print(x)
print(y)
crazy <- function() {
x <<- 4.14
y <- 6}
crazy()
print(x)
print(U)
print(y)
crazy()
x
y<-9
y
crazy()
y
x<-1
x
crazy()
x
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
## This function computes the inverse of matrix x with 'solve'
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
amatrix<-makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
sample(1:10,4)
sample(1:10,4)
set.seed(1)
sample(1:10,4)
sample(1:10,4)
system.time()
system.time(sample(1:10000,4))
system.time(sample(1:10000,10000))
x<-sample(1:100000,40000)
system.time(x)
system.time({
n<-1000
r<-numeric(n)
for (i in 1:n) {
x<-rnorm(n)
r[i]<-mean(x)
}
})
y<-rnorm(1:100)
x<-(1:10)
plot(x,y)
y<-rnorm(1,0,100)
x<-rnorm(5,5,100)
plot(x,y)
y<-rnorm(1,0,100)
y
y<-rnorm(100,0,5)
x<-rnorm(100,10,10)
plot(x,y)
y<-pnorm(100,0,5)
x<-rnorm(100,10,10)
plot(x,y)
y<-rnorm(100,0,5)
x<-rnorm(100,10,10)
plot(x,y)
lm(y~x)
plot(lm(y~x))
summaryRprof()
$by.total
#question 1
set.seed(1)
rpois(5,2)
#question 1
set.seed(1)
rpois(5,2)
swirl()
library(swirl)
install.swirl
install.packages("swirl")
swirl()
swirl
library(swirl)
swirl()
ls()
play()
getwd()
nxt()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head()
head(plants)
head(plants,10)
tail(plants)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1), 100, replace=TRUE, prob=c(0.3, 0.7))
flips<-sample(c(0,1), 100, replace=TRUE, prob=c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob=0.7)
flips2<-rbinom(1, size=100, prob=0.7)
flips2<-rbinom(100, 1, prob=0.7)
flips2
sum(flips)
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5,10)
my_pois<-replicate(100, rpois(5,10))
my_pois
colMeans(my_pois)
cm<-colMeans(my_pois)
hist(cm)
quit()
swirl()
library(swirl)
swirl()
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist, y=cars$speed)
plot(x=cars$speed, y=cars$dist)
plot(x=cars$speed, y=cars$dist, xlab="Speed")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab="Stopping Distance", xlab="Speed")
plot(x=cars$speed, y=cars$dist, ylab="Stopping Distance", xlab="Speed", main="My Plot")
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2)
mtcars
data(mtcars)
?boxplot
boxplot(mtcars, mpg~cyl)
boxplot(formula=mpg~cyl, data=mtcars)
hist(mtcars$mpg)
#read in LL84 data
LL84_raw <- read.csv("/Users/geoffperrin/Desktop/bloomberg_work/311_data/data/Energy_and_Water_Data_Disclosure_for_Local_Law_84__2013_.csv")
LL84_raw['DOF.Property.Floor.Area..Buildings.and.Parking..ft2']
ll84 <- LL84_raw['NYC.Borough..Block..and.Lot..BBL.', 'DOF.Property.Floor.Area..Buildngs.and.Parking..ft2.']
ll84[,1]
ll84
myvars <- c('NYC.Borough..Block..and.Lot..BBL.', 'DOF.Property.Floor.Area..Buildngs.and.Parking..ft2.')
ll84 <- LL84_raw[myvars]
ll84
ll84[,1]
ll84[,2]
ll84 <- ll84[!is.na(ll84$DOF.Property.Floor.Area..Buildngs.and.Parking..ft2.)]
ll84 <- ll84[which(!is.na(ll84$DOF.Property.Floor.Area..Buildngs.and.Parking..ft2.))]
ll84 <- ll84[complete.cases(ll84),]
library(shiny); source('Desktop/bloomberg_work/311_data/r_folder/run_shiny_311.R')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='geoffperrin',
token='DA391E8CAF13D48A7D82BC947396EAC8',
secret='<SECRET>')
rsconnect::setAccountInfo(name='geoffperrin',
token='DA391E8CAF13D48A7D82BC947396EAC8',
secret='1mPyXApVv919TA/DPxJW6L9u5cLr0F6/bxXaowxU')
setwd("~/Desktop/bloomberg_work/bogota_project/data")
#CREATED: GTP 9-4-17
#UPDATED:
#install.packages("shiny")
#library(shiny)
#read in geocoded veedruia data
setwd("~/Desktop/bloomberg_work/bogota_project/data")
df_raw <- read.csv("df_veeduria2.csv")
View(df_raw)
library(data.table)
install.packages("data.table")
install.packages("data.table")
library(data.table)
dt_raw <- data.table(df_raw)
View(dt_raw)
dt_raw[, count.fields(dt_raw$Numero.petición), by = dt_raw$Fecha.ingreso]
dt_raw[, count(dt_raw$Numero.petición), by = dt_raw$Fecha.ingreso]
aggregate(Fecha.ingreso ~ Numero.petición, df_raw, count)
aggregate(Fecha.ingreso ~ Numero.petición, df_raw, count.fields())
aggregate(df_raw$Numero.petición, by=list(Category=df_raw$Fecha.ingreso), FUN=count)
aggregate(df_raw$Numero.petición, by=list(Category=df_raw$Fecha.ingreso), FUN=sum)
aggregate(df_raw$Numero.petición, by=list(Category=df_raw$Fecha.ingreso), FUN=length)
aggregate(Fecha.ingreso ~ Numero.petición, df_raw, length)
list(df_raw$Fecha.ingreso, df_raw$Sector)
aggregate(Numero.petición ~ list(df_raw$Sector, df_raw$Fecha.ingreso), df_raw, length)
aggregate(df_raw$Numero.petición, by=list(df_raw$Sector, df_raw$Fecha.ingreso), FUN=length)
fecha <- aggregate(df_raw$Numero.petición, by=list(df_raw$Sector, df_raw$Fecha.ingreso), FUN=length)
View(fecha)
write.csv("df_veeduria2_R.csv"=fileName, df_raw=Fail)
write.csv(df_raw, file = "f_veeduria2_R.csv")
#read in geocoded veedruia data
setwd("~/Desktop/bloomberg_work/bogota_project/data")
df_raw <- read.csv("df_veeduria2.csv")
fecha <- aggregate(df_raw$Numero.petición, by=list(df_raw$Sector, df_raw$Fecha.ingreso), FUN=length)
write.csv(df_raw, file = "f_veeduria2_R.csv")
View(df_raw)
df_raw.columns
colnames(df_raw)
drops <- c("Tema_SDQS", "Fecha.registro", "Localidad..del.ciudadano", "UPZ.del.ciudadano",
"Barrio.del.ciudadano", "Estrato.del.ciudadano", "Numero.petición")
df_small <- df_raw[ , !(names(df_raw) %in% drops)]
write.csv(df_small, file = "f_veeduria2_R.csv")
